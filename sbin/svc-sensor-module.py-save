#!/usr/bin/env python

# svc-sensor-data.py -- Data collection service listens for any sensor readings
# coming from the sensor module's serial connection. Received data is stored in
# a Redis key store.

from datetime import datetime,timedelta
import time
import os
import serial
import redis
import requests
import json

# Current self
VERSION = "1.00"

# Redis
RHOST = os.getenv("TGR_REDIS_HOST", "172.17.0.1")
RPORT = int(os.getenv("TGR_REDIS_PORT", "6379"))
RDB   = int(os.getenv("TGR_REDIS_DB", "0"))

# Serial device config
SERIAL_SPEED    = 115200
SERIAL_BYTESIZE = 8
SERIAL_PARITY   = 'N'
SERIAL_STOPBITS = 1

def serialRead(comPort):

    serialErrorCount = 0

    while True:
        try:
            ks = redis.Redis(host=RHOST, port=RPORT, db=RDB, decode_responses=True)
        except:
            print("Error connecting to Redis server. Sleeping for 5s...")
            time.sleep(5)

        else:
            if comPort.isOpen():
                if ks.exists("sensor.ph.calibration") and ks.get("sensor.ph.calibration") == "enter":
                    try:
                        comPort.write(bytes("enterph\n", 'utf-8'))
                    except:
                        print("Error sending command over serial port.")
                    else:
                        ks.set("sensor.ph.calibration", "ready")

                if ks.exists("sensor.ph.calibration") and ks.get("sensor.ph.calibration") == "calibrate":
                    try:
                        comPort.write(bytes("calph\n", 'utf-8'))
                    except:
                        print("Error sending command over serial port.")
                    else:
                        ks.set("sensor.ph.calibration", "calibrating")

                if ks.exists("sensor.ph.calibration") and ks.get("sensor.ph.calibration") == "exit":
                    try:
                        comPort.write(bytes("exitph\n", 'utf-8'))
                    except:
                        print("Error sending command over serial port.")
                    else:
                        ks.delete("sensor.ph.calibration")

                try:
                    while comPort.inWaiting() == 0: time.sleep(0.5)
                    if comPort.inWaiting() > 0: 
                        data = comPort.readline().decode().strip()
                        #comPort.flushInput()
                except:
                    serialErrorCount += 1
                    print("Error with serial port.")

                    if serialErrorCount > 10:
                        return
                else:
                    try:
                        jsonData = json.loads(data)
                    except:
                        if data.startswith(">>>"):
                            print(data)
                        elif len(data) == 0:
                            pass
                        else:
                            print("Malformed Json data: {}".format(data))
                    else:
                        #print("Received: {}".format(jsonData))
                        if "system" in jsonData:
                            systemData = jsonData["system"]
                            if "boot" in systemData:
                                bootData = systemData["boot"]
                                bootData["serialport"] = comPort.port
                                ks.hset("sensor.module.properties", mapping=bootData)
                            elif "sensor" in systemData:
                                if "type" in systemData["sensor"]:
                                    if not ks.sismember("sensor.module.sensors", systemData["sensor"]["type"]):
                                        ks.sadd("sensor.module.sensors", systemData["sensor"]["type"])
                                        key = "sensor.module.sensor." + systemData["sensor"]["type"]
                                        del systemData["sensor"]["type"]
                                        ks.hset(key, mapping=systemData["sensor"])
                                elif "units" in systemData["sensor"]:
                                    standard = systemData["sensor"]["units"]["standard"]
                                    del systemData["sensor"]["units"]["standard"]
                                    ks.set("sensor.module.unit", standard)
                                    ks.hset("sensor.module.unit." + standard, mapping=systemData["sensor"]["units"])

                            elif "error" in systemData:
                                print("Sensor module error: " + systemData["error"])

                        elif "sensors" in jsonData:
                            ts = datetime.now().isoformat(timespec='seconds')

                            rawData = jsonData["sensors"]["internal"]
                            sensorData = {}
                            sensorData["temp"] = int(float(rawData["temp"]))
                            sensorData["humidity"] = int(float(rawData["humidity"]))
                            sensorData["timestamp"] = ts
                            ks.hset("sensor.data.internal", mapping=sensorData)

                            rawData = jsonData["sensors"]["external"]
                            sensorData = {}
                            sensorData["temp"] = int(float(rawData["temp"]))
                            sensorData["humidity"] = int(float(rawData["humidity"]))
                            sensorData["pressure"] = int(float(rawData["pressure"]))
                            sensorData["esp"] = int(float(rawData["esp"]))
                            sensorData["dewpoint"] = int(float(rawData["dewpoint"]))
                            sensorData["co2"] = int(float(rawData["co2"]))
                            sensorData["lux"] = int(float(rawData["lux"]))
                            sensorData["timestamp"] = ts
                            ks.hset("sensor.data.external", mapping=sensorData)

                            rawData = jsonData["sensors"]["hydroponic"]
                            sensorData = {}
                            sensorData["temp"] = int(float(rawData["temp"]))
                            sensorData["ph"] = "{0:.1f}".format(float(rawData["ph"]))
                            sensorData["timestamp"] = ts
                            ks.hset("sensor.data.hydroponic", mapping=sensorData)


if __name__ == '__main__':

    for x in range(4):
        port = "/dev/ttyACM" + str(x)
        try:
            comPort = serial.Serial(port)
        except:
            print("Error opening serial port: {}".format(port))
        else:
            comPort.baudrate = SERIAL_SPEED
            comPort.bytesize = SERIAL_BYTESIZE
            comPort.parity   = SERIAL_PARITY
            comPort.stopbits = SERIAL_STOPBITS

            print("Found a module on serial port: {}".format(port))
            time.sleep(1)
            break

    serialRead(comPort)
